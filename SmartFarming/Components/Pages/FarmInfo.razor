@page "/"
@inject GeolocationService GeolocationService
@inject NavigationManager Navigator
@inject IJSRuntime JS
@using Services

<h4>Farm Information</h4>
<div class="form-container">
    <label>Start Date: </label>   <InputDate @bind-Value="StartDate" class="form-control" />
    <label>End Date: </label>     <InputDate @bind-Value="EndDate" class="form-control" />
    <label for="vegetation">Vegetation Type:</label>
    <select class="form-dropdown" @onchange="@GetLocation">
        <option value="Tomato">Tomato</option>
        <option value="Lettuce">Lettuce</option>
        <option value="Wheat">Wheat</option>
        <option value="Corn">Corn</option>
        <option value="Rice">Rice</option>
        <option value="Apple">Apple</option>
    </select>    
    <div>
        <button class="form-button" @onclick="ShowMeteomaticsData">Analyze</button>
    </div>
</div>

<div>
    <p>Farm Location: @(farmDetails.Location ?? " not detected yet")</p>
    <div id="map"></div> 
</div>

@code {
    private FarmDetails farmDetails = new FarmDetails();
    private Xamarin.Essentials.Location location;
    public DateTime StartDate { get; set; } = DateTime.UtcNow;
    public DateTime EndDate { get; set; } = DateTime.UtcNow.AddDays(5);
    public string FormattedDateRange { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender = true)
    {
        farmDetails.VegetationType = "Tomato";
        await GetCurrentLocation();
    }

    private async Task GetLocation(ChangeEventArgs e)
    {
        farmDetails.VegetationType = e.Value.ToString();
        await GetCurrentLocation();
    }

    private async Task GetCurrentLocation()
    {
        location = await GeolocationService.GetLocationAsync();
        GetFormattedDateRange();
        if (location != null)
        {
            farmDetails.Location = $"{location.Latitude}, {location.Longitude}";
        }
        else
        {
            farmDetails.Location = "Location not available";
        }

        await ShowInMap();
    }

    private async Task ShowInMap()
    {
        // Initialize the map with the provided latitude and longitude
        await JS.InvokeVoidAsync("initializeLeafletMap", location.Latitude, location.Longitude);
    }

    private void ShowMeteomaticsData()
    {
        Navigator.NavigateTo($"/visualizer/{FormattedDateRange}/{location.Latitude}/{location.Longitude}");
    }

    private void GetFormattedDateRange()
    {
        TimeSpan duration = EndDate - StartDate;
        FormattedDateRange = $"{StartDate.ToString("yyyy-MM-ddTHH:mm:ss")}ZP{duration.Days}D";
    }
}

